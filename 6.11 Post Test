import numpy as np

def func(x):
    return np.exp(-0.5*x)*(4 - x) - 2

def diffunc(x):
    return (x*np.exp(-0.5*x)-6*np.exp(-0.5*x))/(2)

def newton_raphson(func, diffunc, x0, tol=1e-6, max_iter=100):
    x = x0
    print("Iterasi 0: x = {:.8f}".format(x))
    for iterasi in range(1, max_iter + 1):
        x1 = x - func(x) / diffunc(x)
        error_toleransi = abs(func(x1))
        error_aproksimasi = abs(x1 - x)
        print("Iterasi {}: x = {:.8f}, error toleransi = {:.8f}, error aproksimasi = {:.8f}".format(iterasi, x1, error_toleransi, error_aproksimasi))
        if error_aproksimasi < tol:
            return x1, error_toleransi, error_aproksimasi
        x = x1
    return x, error_toleransi, error_aproksimasi

# Initial guess
x0 = 2

# Call Newton-Raphson method
akar, error_toleransi, error_aproksimasi = newton_raphson(func, diffunc, x0)

# Output
print("Root:", akar)
print("Error toleransi:", error_toleransi)
print("Error aproksimasi:", error_aproksimasi)

